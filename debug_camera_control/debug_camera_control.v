import os

fn main() {
	mut up := []string{}
	mut down := []string{}
	mut left := []string{}
	mut right := []string{}
	mut current_direction := -1
	// os.[]args does not work when called from within CMake.
	flags := os.args.join(' ')
	args := flags.split(' ')[1..]
	// args := os.args[1..]
	for arg in args {
		if arg[0] == `-` {
			current_direction++
			continue
		}
		match current_direction {
			0 { up << arg }
			1 { down << arg }
			2 { left << arg }
			3 { right << arg }
			else { panic('$current_direction is out of direction bounds') }
		}
	}

	mut hpp := ''
	hpp += '#include <liblava/lava.hpp>\n\n'
	hpp += '// NOTE: This file is automatically generated.\n\n'

	hpp += 'lava::keys_ref debug_key_up = {'
	for key in up {
		hpp += 'lava::key::$key,'
	}
	hpp += '};\n'

	hpp += 'lava::keys_ref debug_key_down = {'
	for key in down {
		hpp += 'lava::key::$key,'
	}
	hpp += '};\n'

	hpp += 'lava::keys_ref debug_key_left = {'
	for key in left {
		hpp += 'lava::key::$key,'
	}
	hpp += '};\n'

	hpp += 'lava::keys_ref debug_key_right = {'
	for key in right {
		hpp += 'lava::key::$key,'
	}
	hpp += '};\n'

	file_name := 'debug_camera_control.hpp'
	file_path := @VMODROOT + '/' + '$file_name'
	if os.exists(file_path) {
		os.rm(file_path) or { panic('Failed to remove $file_name') }
	}
	os.create(file_path) or { panic('Failed to create $file_name') }
	os.write_file(file_path, hpp) or { panic('Failed to write $file_name') }
}
